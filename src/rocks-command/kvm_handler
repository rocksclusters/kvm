#!/opt/rocks/bin/python
# 
# @Copyright@
# 
# 				Rocks(r)
# 		         www.rocksclusters.org
# 		         version 6.2 (SideWindwer)
# 		         version 7.0 (Manzanita)
# 
# Copyright (c) 2000 - 2017 The Regents of the University of California.
# All rights reserved.	
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice unmodified and in its entirety, this list of conditions and the
# following disclaimer in the documentation and/or other materials provided 
# with the distribution.
# 
# 3. All advertising and press materials, printed or electronic, mentioning
# features or use of this software must display the following acknowledgement: 
# 
# 	"This product includes software developed by the Rocks(r)
# 	Cluster Group at the San Diego Supercomputer Center at the
# 	University of California, San Diego and its contributors."
# 
# 4. Except as permitted for the purposes of acknowledgment in paragraph 3,
# neither the name or logo of this software nor the names of its
# authors may be used to endorse or promote products derived from this
# software without specific prior written permission.  The name of the
# software includes the following terms, and any derivatives thereof:
# "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
# the associated name, interested parties should contact Technology 
# Transfer & Intellectual Property Services, University of California, 
# San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
# Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
# 
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# @Copyright@
#
#

import os
import re
import hashlib
import hmac
import sys
import syslog
import subprocess
import rocks.db.helper
import rocks.db.vmextend
import rocks.db.mappings.kvm


def abort(str):
	syslog.syslog("kvm_handler error: " + str)
	syslog.closelog()
	sys.exit(1)


def main():
	syslog.openlog('rockscommand', syslog.LOG_PID, syslog.LOG_LOCAL0)

	# verify request
	if os.environ.get('SERF_EVENT') != 'user':
		abort("not a user event")

	if os.environ.get('SERF_USER_EVENT') == 'kvm_stop':
		# ok this is it
		input = sys.stdin.read()
		input = input.strip().split()
		if len(input) != 2:
			abort("wrong format in message payload (%s)" % input)

		hostname = input[0]
		digest = input[1]


		# sanitize hostname before we hand it to the DB
		# valid hostname regexp (we do not accept domains in this)
		# http://stackoverflow.com/questions/106179/regular-expression-to-match-dns-hostname-or-ip-address
		regexp = '([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])'
		if not re.match(regexp, hostname):
			abort('hostname is not valid %s' % hostname)

		try:
			database = rocks.db.helper.DatabaseHelper()
			database.connect()
		except Exception as e:
			abort("problem connecting to the DB (%s)" % e)

		try:
			nodes = database.getNodesfromNames([hostname], preload =
			['vm_defs'])
		except Exception as e:
			abort("hostname %s not found in the database (%s)" % 
				(hostname, str(e)))

		if len(nodes) != 1:
			abort("%s is not a valid name" % hostname)
		node = nodes[0]
		container = node.vm_defs.physNode.name
		# calculate hmac
		# the key of the hmac is the container name TODO change this
		# the message of the hmac is the hostname
		a = hmac.new(container, hostname, hashlib.sha1)
		computed_digest = a.hexdigest()
		if computed_digest != digest:
			abort("wrong digest %s" % digest)

		# it is all good call the node plugins
		cmd = "/opt/rocks/bin/rocks stop host vm %s terminate=true " +\
				"&> /dev/null < /dev/null &"
		subprocess.call(cmd % hostname, shell=True)

	# Check if the rocks command has been quoted.
	syslog.closelog()


if __name__ == "__main__":
    main()
